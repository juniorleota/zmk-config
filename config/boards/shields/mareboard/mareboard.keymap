#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NUM 1
#define NAV 2
#define SYMB 3
#define MOUSE 4
#define FUNC 5

#define HYPER LS(LC(LA(LCMD)))
#define MEH LS(LC(LALT))

#include "combos.dtsi"
#include "mouse.dtsi"

#define COMBO_TIMEOUT_MS 45

/ {
  combos {
    compatible = "zmk,combos";
    
    combo_LeftCmd {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <2 3>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&kp LGUI>; 
    };
    
    combo_RightCmd {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <6 7>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&kp RGUI>; 
    };
    
    combo_LeftHyper {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <1 2>;
      layers = <BASE NAV NUM SYMB>;
      bindings = <&kp HYPER>;
    };
    
    combo_RightHyper {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <7 8>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&kp HYPER>;
    };
    
    combo_LeftTab {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <12 13>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&kp TAB>; 
    };
    
    combo_RightEnter {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <17 18>;
      layers = <NUM BASE NAV SYMB>;
      bindings = <&kp RET>; 
    };
    
    combo_LeftBackspace {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <11 12>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&kp BACKSPACE>; 
    };
    
    combo_RightEsc {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <16 17>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&kp ESC>; 
    };
    
    combo_LeftMeh {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <22 23>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&kp MEH>;
    };
    
    combo_RightMeh {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <26 27>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&kp MEH>;
    };
    
    combo_RightBootloader {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <7 8 9>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&bootloader>;
    };
    
    combo_LeftBootloader {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <0 1 2>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&bootloader>;
    };
    
    combo_RightSystemReset {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <27 28 29>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&sys_reset>; 
    };
    
    combo_LeftSystemReset {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <20 21 22>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&sys_reset>; 
    };
    
    combo_RightBtClear {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <6 7 8>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&bt BT_CLR>; 
    };
    
    combo_LeftBtClear {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <1 2 3>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&bt BT_CLR>; 
    };
    
    combo_BT1 {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <10 11 12>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&bt BT_SEL 0>; 
    };
    
    combo_BT2 {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <11 12 13>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&bt BT_SEL 1>; 
    };
    
    combo_BT3 {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <12 13 14>;
      layers = <BASE NAV NUM SYMB>;
      bindings = <&bt BT_SEL 2>; 
    };
    
    combo_LeftShift {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <21 22>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&kp LSFT>; 
    };
    
    combo_RightAlt {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <27 28>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&kp RALT>; 
    };
    
    combo_BT4 {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <15 16 17>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&bt BT_SEL 3>; 
    };
    
    combo_BT5 {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <16 17 18>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&bt BT_SEL 4>; 
    };
    
    combo_USB {
      timeout-ms = <COMBO_TIMEOUT_MS>;
      key-positions = <17 18 19>;
      layers = <BASE NUM NAV SYMB>;
      bindings = <&out OUT_TOG>; 
    };
  };

  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping-term-ms = <250>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
  };
  keymap {
    compatible = "zmk,keymap";

    Base_layer {
      bindings = <
        &kp Q &kp W &kp J &kp R &kp T &kp Y &kp U &kp I &kp O &kp P
        &kp A &kp S &kp D &kp F &kp G &kp M &kp N &kp E &kp L &kp SEMICOLON
        &kp Z &kp X &kp C &kp B &kp V &kp K &kp H &kp COMMA &kp PERIOD &kp SLASH
        &to MOUSE &lt NAV BACKSPACE &kp LEFT_SHIFT &sl SYMB &lt NUM SPACE &lt FUNC RIGHT_CONTROL
      >;
    };

    Num_layer {
      bindings = <
        &none &kp NUMBER_6 &kp NUMBER_5 &kp NUMBER_4 &kp DOT &none &none &none &none &none
        &kp NUMBER_0 &kp NUMBER_3 &kp NUMBER_2 &kp NUMBER_1 &kp TAB &none &none &none &none &none
        &none &kp NUMBER_9 &kp NUMBER_8 &kp NUMBER_7 &none &none &none &none &none &none
        &kp NUMBER_0 &kp DEL &none &none &none &none 
      >;
    };

    Nav_layer {
      bindings = <
        &none &none &none &none &none &kp LA(LEFT) &none &none &kp LA(RIGHT) &none
        &none &none &none &none &none &kp LEFT &kp DOWN &kp UP &kp RIGHT &none
        &none &none &none &none &none &kp LG(LEFT) &kp PG_DN &kp PG_UP &kp LG(RIGHT) &none
        &none &none &none &none &none &none 
      >;
    };

    Symb_layer {
      bindings = <
        &none &none &kp EQUAL &kp PLUS &none &kp DOUBLE_QUOTES &kp MINUS &kp UNDERSCORE &kp PIPE &kp BACKSLASH
        &kp EXCLAMATION &kp AT_SIGN &kp HASH &kp DOLLAR &kp PERCENT &kp CARET &kp AMPERSAND &kp ASTERISK &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS
        &none &none &kp TILDE &kp GRAVE &none &kp SINGLE_QUOTE &kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT_BRACKET &kp RIGHT_BRACKET
        &to BASE &none &none &none &none &none 
      >;
    };
    
    Mouse_layer {
      bindings = <
        &none &none &none &none &none U_WH_L U_WH_U U_WH_D U_WH_R &none
        &kp LCTRL &kp LCTRL &kp LGUI &kp LSFT &none U_MS_L U_MS_D U_MS_U  U_MS_R &none
        &none &none &none &none &none &none &none &none &none &none
                    &to BASE &none &none U_BTN2 U_BTN1 U_BTN3
      >;
    };

    Func_layer {
      bindings = <
        &none &kp F6 &kp F5 &kp F4 &none &none &none &none &none &none &none
        &kp F3 &kp F2 &kp F1 &none &none &none &none &none &none &none
        &kp F10 &kp F8 &kp F7 &none &none &none &none &none &none &kp F12
        &kp F11 &none &none &none &none 
      >;
    };
  };
};